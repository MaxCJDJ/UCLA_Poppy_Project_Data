---
title: "Data_Explore_V3"
format: html
---

```{r}
# ───────────────────────────────────────────────────────────────────────────
# 2. Load libraries
# ───────────────────────────────────────────────────────────────────────────
library(haven)     # read_sav()
library(dplyr)     # data wrangling
library(labelled)  # as_factor()
library(skimr)     # skim()
library(tidyr)     # pivot_longer()
library(naniar)    # vis_miss()
library(stringr)   # for str_replace_all()

# 🔒 This file is not included in public repo
# sav_path <- "...sav"
sav_path <- "REDACTED.sav"

stop("❌ Data not included in repo. Please provide your own SPSS file to continue.")
```

# 2. Define and check file path --------------------------------------------
```{r}
# 2. Check that the SPSS file exists before trying to read it
if (!file.exists(sav_path)) {
  # If the file isn’t found, stop execution and print an error
  stop("❌ File not found:\n  ", sav_path)
} else {
  # If the file exists, print a confirmation with its size in MB
  message("✅ Found file (", 
          round(file.info(sav_path)$size / 1024^2, 1),
          " MB)\n")
}
```

# 3. Read SPSS data into a tibble ------------------------------------------
```{r}
# 3. Read the SPSS (.sav) file into R as a tibble (data frame)
df_tcwp <- read_sav(sav_path)
```

# 4. Basic structure & names -----------------------------------------------
```{r}
# 4. Inspect the data’s overall structure and column names

# Print the number of rows and columns
message("\n-- Dimensions --------------------------------------------------")
message(" Rows: ", nrow(df_tcwp), 
        " | Columns: ", ncol(df_tcwp), "\n")

# Show a compact “glimpse” of the data (types and a preview of values)
message("-- Glimpse -----------------------------------------------------")
glimpse(df_tcwp)

# List all column names
message("\n-- Column names ------------------------------------------------")
print(colnames(df_tcwp))
```

# 5. Convert all labelled SPSS vars to factors ----------------------------
```{r}
# 5. Convert all SPSS-labelled variables into R factors
df_tcwp <- df_tcwp %>%
  mutate(
    # For every column that still uses haven’s labelled class,
    # turn it into an R factor using the embedded value labels
    across(where(is.labelled), as_factor)
  )

# Confirm conversion by glimpsing the data again
message("\n-- After converting labelled → factor --------------------------")
glimpse(df_tcwp)
```

# 6. Overall summary with skim() -------------------------------------------
```{r}
# 6. Provide a quick summary of every column with skimr
message("\n-- skimr summary -----------------------------------------------")
skim(df_tcwp)
```

# 7. Missingness overview --------------------------------------------------
```{r}
# 7. Compute missingness percentage for each variable
message("\n-- % Missing by variable ---------------------------------------")
missing_pct <- df_tcwp %>%
  # For each column, compute (NA count / total rows) * 100
  summarise(across(everything(), ~ mean(is.na(.)) * 100)) %>%
  # Pivot into long form for easy sorting and printing
  pivot_longer(
    everything(), 
    names_to  = "variable", 
    values_to = "pct_missing"
  ) %>%
  # Show variables with the most missing data at the top
  arrange(desc(pct_missing))

print(missing_pct)
```

# 8. Numeric variables summary --------------------------------------------
```{r}
# 8. Summarize numeric-only columns

# Select only numeric columns
num_vars <- df_tcwp %>% select(where(is.numeric))

if (ncol(num_vars) > 0) {
  # If there are any numeric columns, print their min/median/max, etc.
  message("\n-- Summary of numeric variables ------------------------------")
  print(summary(num_vars))
} else {
  # Otherwise, note that no numeric columns exist
  message("\n-- No purely numeric columns found ----------------------------")
}
```

# 9. Factor variables: top levels ------------------------------------------
```{r}
# 9. Examine factor variables: show top 5 levels by count

# Get a vector of all factor-column names
fac_vars <- df_tcwp %>% select(where(is.factor)) %>% names()

if (length(fac_vars) > 0) {
  message("\n-- Top 5 levels for each factor var --------------------------")
  for (v in fac_vars) {
    # Print the variable name
    cat("\nVariable:", v, "\n")
    # Count each level, sort descending, and show the top 5
    print(
      df_tcwp %>% 
        count(.data[[v]], sort = TRUE, name = "n") %>%
        slice_head(n = 5)
    )
  }
} else {
  message("\n-- No factor columns found -----------------------------------")
}
```

# 10. Candidate ID variables -----------------------------------------------
```{r}
# 10. Identify potential ID columns (one unique value per row)

message("\n-- Candidate ID (unique-per-row) vars -------------------------")
unique_counts <- df_tcwp %>%
  # For each column, count the number of distinct values
  summarise(across(everything(), ~ n_distinct(.))) %>%
  pivot_longer(
    cols      = everything(), 
    names_to  = "var", 
    values_to = "n_unique"
  )

# Filter to those where the number of unique values equals the number of rows
id_cands <- unique_counts %>%
  filter(n_unique == nrow(df_tcwp)) %>%
  pull(var)

if (length(id_cands) > 0) {
  message("Possible ID columns: ", paste(id_cands, collapse = ", "))
} else {
  message("No single column is unique for every row.")
}
```

# 11. Save file -----------------------------------------------
```{r}
# ───────────────────────────────────────────────────────────────────────────
# 11. (Optional) Save a lightweight RDS for faster future loading
# ───────────────────────────────────────────────────────────────────────────
# Using .rds preserves R-specific objects (factors, dates, labels) 
# and is much faster to read back in than re-parsing the original SPSS file.
saveRDS(
  df_tcwp,
  file = "....rds"
)
```




